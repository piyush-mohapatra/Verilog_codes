//One Hot encoded Overlapping Sequence detector FSM 
module fsm_110101(in,clk,rst,out);
input in,clk,rst;
output reg out;
reg [5:0]state;

parameter s0=6'b000001;
parameter s1=6'b000010;
parameter s2=6'b000100;
parameter s3=6'b001000;
parameter s4=6'b010000;
parameter s5=6'b100000;

always @(posedge clk) begin
if (rst) state<=s0;
else begin
case (state)
s0: begin state=in?s1:s0; out=0; end
s1: begin state=in?s2:s0; out=0; end
s2: begin state=in?s2:s3; out=0; end
s3: begin state=in?s4:s0; out=0; end
s4: begin state=in?s2:s5; out=0; end
s5: begin state=in?s1:s0; out=in?1:0; end
default: begin state=s0; out=0; end
endcase
end
end
endmodule

///// Testbench /////
module tb_fsm_110101;
reg in,clk,rst;
wire out;

fsm_110101 dut(in,clk,rst,out);

initial begin
$monitor($time,"state=%d in=%b out=%b",dut.state,in,out);
clk=1;
rst=0;
in=1;
#10 in = 1;
#10 in = 1;
#10 in=0;
#10 in=1;
#10 in=0;
#10 in=1; // Detect
#10 in=1;
#10 in=0;
#10 in=1;
#10 in=0;
#10 in=1; //Detect
#10 in=0;
end
always #5 clk = ~clk;
endmodule
